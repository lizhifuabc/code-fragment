<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.lizhifuabc.tree.mapper.materialized.MaterializedPathNodeMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="io.github.lizhifuabc.tree.domain.materialized.MaterializedPathNode">
        <id column="id" property="id" />
        <result column="path" property="path" />
        <result column="name" property="name" />
        <result column="level" property="level" />
        <result column="description" property="description" />
        <result column="disabled_flag" property="disabledFlag" />
        <result column="deleted_flag" property="deletedFlag" />
        <result column="update_time" property="updateTime" />
        <result column="create_time" property="createTime" />
    </resultMap>
    
    <!-- 插入节点 -->
    <insert id="insert" parameterType="io.github.lizhifuabc.tree.domain.materialized.MaterializedPathNode" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tree_materialized_path (
            path, name, level, description, disabled_flag, deleted_flag
        ) VALUES (
            #{path}, #{name}, #{level}, #{description}, #{disabledFlag}, #{deletedFlag}
        )
    </insert>
    
    <!-- 更新节点 -->
    <update id="update" parameterType="io.github.lizhifuabc.tree.domain.materialized.MaterializedPathNode">
        UPDATE tree_materialized_path
        SET name = #{name},
            description = #{description},
            disabled_flag = #{disabledFlag},
            deleted_flag = #{deletedFlag}
        WHERE id = #{id}
    </update>
    
    <!-- 删除节点 -->
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM tree_materialized_path WHERE id = #{id}
    </delete>
    
    <!-- 根据ID查询节点 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM tree_materialized_path WHERE id = #{id} AND deleted_flag = 0
    </select>
    
    <!-- 查询所有节点 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT * FROM tree_materialized_path WHERE deleted_flag = 0 ORDER BY path
    </select>
    
    <!-- 根据父节点ID查询子节点 -->
    <select id="selectByParentId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT child.*
        FROM tree_materialized_path parent
        JOIN tree_materialized_path child ON child.path LIKE CONCAT(parent.path, '.%')
        WHERE parent.id = #{parentId}
        AND child.level = parent.level + 1
        AND child.deleted_flag = 0
        ORDER BY child.path
    </select>
    
    <!-- 根据路径前缀查询子孙节点 -->
    <select id="selectByPathPrefix" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT * FROM tree_materialized_path
        WHERE path LIKE CONCAT(#{pathPrefix}, '%')
        AND deleted_flag = 0
        ORDER BY path
    </select>
    
    <!-- 根据路径查询祖先节点 -->
    <select id="selectAncestorsByPath" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT ancestor.*
        FROM tree_materialized_path ancestor
        WHERE #{path} LIKE CONCAT(ancestor.path, '.%')
        OR ancestor.path = #{path}
        AND ancestor.deleted_flag = 0
        ORDER BY ancestor.level
    </select>
</mapper>